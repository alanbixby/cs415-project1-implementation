import asyncio
import datetime
import os

import pymongo
from dotenv import load_dotenv

load_dotenv()

from reddit_stream import RedditSubredditStream

stream = RedditSubredditStream(
    username=os.environ["REDDIT_USERNAME"],
    password=os.environ["REDDIT_PASSWORD"],
    client_id=os.environ["REDDIT_CLIENT_ID"],
    client_secret=os.environ["REDDIT_CLIENT_SECRET"],
    subreddits=[  # "politics"],
        "politics",
        "collegebasketball",
        "angelsbaseball",
        "whitesox",
        "orioles",
        "astros",
        "wahoostipi",
        "redsox",
        "oaklandathletics",
        "motorcitykitties",
        "nyyankees",
        "mariners",
        "kcroyals",
        "tampabayrays",
        "texasrangers",
        "minnesotatwins",
        "torontobluejays",
        "azdiamondbacks",
        "cubs",
        "braves",
        "coloradorockies",
        "reds",
        "letsgofish",
        "dodgers",
        "brewers",
        "newyorkmets",
        "padres",
        "buccos",
        "phillies",
        "sfgiants",
        "cardinals",
        "nationals",
        "atlantahawks",
        "bostonceltics",
        "chicagobulls",
        "gonets",
        "clevelandcavs",
        "charlottehornets",
        "nyknicks",
        "detroitpistons",
        "heat",
        "sixers",
        "pacers",
        "orlandomagic",
        "torontoraptors",
        "mkebucks",
        "washingtonwizards",
        "denvernuggets",
        "warriors",
        "mavericks",
        "timberwolves",
        "laclippers",
        "rockets",
        "thunder",
        "lakers",
        "memphisgrizzlies",
        "ripcity",
        "suns",
        "nolapelicans",
        "utahjazz",
        "kings",
        "nbaspurs",
        "49ers",
        "buffalobills",
        "ravens",
        "colts",
        "denverbroncos",
        "miamidolphins",
        "bengals",
        "jaguars",
        "kansascitychiefs",
        "patriots",
        "browns",
        "texans",
        "oaklandraiders",
        "nyjets",
        "steelers",
        "tennesseetitans",
        "chargers",
        "cowboys",
        "chibears",
        "falcons",
        "azcardinals",
        "nygiants",
        "detroitlions",
        "panthers",
        "eagles",
        "greenbaypackers",
        "saints",
        "seahawks",
        "redskins",
        "minnesotavikings",
        "buccaneers",
        "stlouisrams",
        "hockey",
        "soccer",
        "fitness",
        "sports",
        "afl",
        "cfl",
        "nfl",
        "worldcup",
        "mls",
        "rugbyunion",
        "nrl",
        "baseball",
        "mlb",
        "nhl",
        "nba",
        "progolf",
        "tennis",
        "cricket",
        "olympics",
        "gaa",
        "cfb",
        "fcs",
        "collegebaseball",
        "collegehockey",
        "collegesoccer",
        "collegesoftball",
        "adrenaline",
        "bicycling",
        "bjj",
        "boxing",
        "football",
        "formula1",
        "judo",
        "lacrosse",
        "mma",
        "motorsports",
        "nascar",
        "trackandfield",
        "ultimate",
        "volleyball",
        "wrestling",
        "swimming",
        "fishing",
        "kayaking",
        "rowing",
        "surfing",
        "waterpolo",
        "wake",
        "curling",
        "skiing",
        "snowboarding",
        "speedskating",
        "badminton",
        "billiards",
        "bowling",
        "darts",
        "discgolf",
        "fencing",
        "golf",
        "handball",
        "longboarding",
        "racquetball",
        "running",
        "skateboarding",
        "snooker",
        "squaredcircle",
        "squash",
        "fantasyfootball",
        "sportdocumentaries",
        "29er",
        "advancedrunning",
        "weightlifting",
        "workout",
        "xcountryskiing",
        "adventureracing",
        "barefoot",
        "barefoothiking",
        "barefootrunning",
        "camping",
        "campingandhiking",
        "climbing",
        "crosscountry",
        "cycling",
        "cyclocross",
        "bicycletouring",
        "hockeyplayers",
        "hsxc",
        "lifting",
        "mastersrunning",
        "kettlebell",
        "openwaterswimming",
        "outdoors",
        "parkour",
        "powerbuilding",
        "powerlifting",
        "raceit",
        "rollerblading",
        "rollerderby",
        "runningwithdogs",
        "sprinting",
        "sportsmedicine",
        "strongman",
        "hiking",
        "trailrunning",
        "triathlon",
        "ultramarathon",
        "velo",
        "yoga",
        "basketball",
        "euroleague",
        "formulae",
        "hurling",
        "indycar",
        "mlrugby",
        "motogp",
        "motorcycles",
        "mtb",
        "mountaineering",
        "peloton",
        "scottishfootball",
        "skydiving",
        "sportsarefun",
        "theocho",
        "uslpro",
        "crossfit",
        "detroitredwings",
        "edmontonoilers",
        "nbaww",
        "habs",
        "caps",
        "tampabaylightning",
        "coyotes",
        "bostonbruins",
        "winnipegjets",
        "commanders",
        "stlouisblues",
        "devils",
        "dallasstars",
        "floridapanthers",
        "nbacirclejerk",
        "fantasybball",
        "canucks",
        "rangers",
        "canes",
        "anaheimducks",
        "coloradoavalanche",
        "calgaryflames",
        "predators",
        "flyers",
        "losangeleskings",
        "sabres",
        "ottawasenators",
        "bluejackets",
        "hawks",
        "nhlstreams",
        "newyorkislanders",
        "wildhockey",
        "sanjosesharks",
        "penguins",
        "leafs",
    ],
    db_name=os.getenv("DB_NAME", "cs415_data_science_dev"),
    overlap_threshold=15,
)


async def printStream() -> None:
    await stream.populate_from_database()
    asyncio.create_task(stream.start_poll_subreddits())
    db = stream.client[stream.db_name]
    async for item in stream.poll_subreddits():
        print(
            item["data"]["subreddit"],
            item["data"]["name"],
            "| comments" if item["kind"] == "t1" else "| submissions",
        )
        try:
            if item["kind"] == "t3":
                submission = item["data"]
                await db[stream.collection_submissions].insert_one(
                    {
                        "_id": submission["name"],
                        "submission_id": submission["id"],
                        "title": submission["title"],
                        "text": submission.get("selftext", ""),
                        "is_self": submission["is_self"],
                        "subreddit": submission["subreddit"].lower(),
                        "subreddit_id": submission["subreddit_id"],
                        "url": submission.get("url", ""),
                        "url_overridden_by_dest": submission.get(
                            "url_overridden_by_dest", ""
                        ),
                        "crosspost_parent": submission.get("crosspost_parent", ""),
                        "created_at": datetime.datetime.fromtimestamp(
                            submission["created_utc"]
                        ),
                    }
                )
            else:
                comment = item["data"]
                await db[stream.collection_comments].insert_one(
                    {
                        "_id": comment["name"],
                        "comment_id": comment["id"],
                        "author": comment["author"],
                        "text": comment["body"],
                        "subreddit": comment["subreddit"],
                        "subreddit_id": comment["subreddit_id"],
                        "submission_id": comment["link_id"],
                        "parent_id": comment.get("parent_id", ""),
                        "created_at": datetime.datetime.fromtimestamp(
                            comment["created_utc"]
                        ),
                    }
                )
        except pymongo.errors.DuplicateKeyError:
            pass
        except Exception as e:
            print(f"DBEXCEPTION {e}")  # TODO: 10/10 error handling


asyncio.run(printStream())
